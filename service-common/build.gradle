import java.nio.channels.Channels
import java.nio.channels.ReadableByteChannel
import java.nio.file.Files

buildscript {
    ext.jacksonVersion = "2.9.9"
    ext.kotlin_version = "1.3.41"
    ext.ktor_version = "1.2.3"
    ext.dokka_version = "0.9.18"

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.0.0-RC16")
}

detekt {
    toolVersion = "1.0.0-RC16"
    input = files("src/main/kotlin")
    filters = ".*/resources/.*,.*/build/.*"

    // https://stackoverflow.com/a/921400
    def currentVersion = "v0.2.16"
    URL website = new URL("https://raw.githubusercontent.com/SDU-eScience/GradleBootstrap/$currentVersion/detekt.yml")
    ReadableByteChannel rbc = Channels.newChannel(website.openStream())
    def outputFile = Files.createTempFile("detekt", ".yml").toFile()
    FileOutputStream fos = new FileOutputStream(outputFile)
    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE)
    config = files(outputFile.absolutePath)
}

group "dk.sdu.cloud"
version '1.5.6'

apply plugin: "kotlin"
apply plugin: "maven-publish"
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()

    maven { url "https://kotlin.bintray.com/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }

    def username = System.getenv("ESCIENCE_MVN_USER") ?: eScienceCloudUser
    def password = System.getenv("ESCIENCE_MVN_PASSWORD") ?: eScienceCloudPassword

    maven {
        url("https://dev.cloud.sdu.dk/archiva/repository/internal")
        credentials {
            it.username(username)
            it.password(password)
        }
    }
    maven {
        url("https://dev.cloud.sdu.dk/archiva/repository/snapshots")
        credentials {
            it.username(username)
            it.password(password)
        }
    }
}

dependencies {

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Redis
    compile 'io.lettuce:lettuce-core:5.1.6.RELEASE'

    // Serialization
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}"
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: "${jacksonVersion}"

    // ktor
    compile group: "io.ktor", name: "ktor-server-core", version: "$ktor_version"
    compile group: "io.ktor", name: "ktor-jackson", version: "$ktor_version"
    compile group: "io.ktor", name: "ktor-server-netty", version: "$ktor_version"
    compile group: "io.ktor", name: "ktor-server-host-common", version: "$ktor_version"

    // db
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.1.Final'
    compile group: 'org.hibernate', name: 'hibernate-hikaricp', version: '5.4.1.Final'
    compile 'org.flywaydb:flyway-core:5.2.4'

    compile 'eu.infomas:annotation-detector:3.0.5'

    // Client
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.2'

    compile "io.ktor:ktor-client-core:$ktor_version"
    compile "io.ktor:ktor-client-okhttp:$ktor_version"
    compile "io.ktor:ktor-client-json:$ktor_version"
    compile "io.ktor:ktor-client-json-jvm:$ktor_version"
    compile "io.ktor:ktor-client-jackson:$ktor_version"
    compile "io.ktor:ktor-client-websockets:$ktor_version"
    compile "io.ktor:ktor-client-cio:$ktor_version"

    // JWTs
    compile "com.auth0:java-jwt:3.8.1"

    compile 'com.google.guava:guava:27.0.1-jre'

    // Testing
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.0'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.0'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.0'

    // Exported via testing lib
    // TODO How could we mark them in a unified location?
    def withoutLogback = { exclude group: 'ch.qos.logback', module: 'logback-classic' }

    compile "io.ktor:ktor-server-test-host:$ktor_version", withoutLogback
    compile "io.mockk:mockk:1.9.3"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml {
            enabled true // coveralls plugin depends on xml format report
        }

        html {
            enabled true
        }
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)

kotlin.sourceSets.all {
    it.languageSettings {
        progressiveMode = true
    }
}


task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
    exclude("**/dk/sdu/cloud/service/test/**")
}

jar {
    exclude("**/dk/sdu/cloud/service/test/**")
}

def testJarTask = tasks.create("testJarTask", Jar) { task ->
    task.baseName = "${project.name}-test"
    task.from(sourceSets.main.output)
    task.from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    task.include("**/dk/sdu/cloud/service/test/**")
    task.include("META-INF/**/${project.name}.kotlin_module")
    task.includeEmptyDirs = false
    task.with(jar)
}

task testSourceJar(type: Jar) {
    archiveName = "service-common-test-${project.version}-sources.jar"
    from(sourceSets.main.allSource) {
        include("**/dk/sdu/cloud/service/test/**")
        includeEmptyDirs = false
    }
}

publishing {

    def pub = it as PublishingExtension

    def testDependencies = [
            "dk.sdu.cloud:service-common:${project.version}",
            "io.ktor:ktor-server-test-host:$ktor_version",
            "io.mockk:mockk:1.8.12.kotlin13"
    ].collect { it.toString() }.toSet()

    def testJavaPublication = pub.publications.create("testJava", MavenPublication) as MavenPublication
    testJavaPublication.groupId = project.group
    testJavaPublication.artifactId = project.name + "-test"
    testJavaPublication.version = project.version
    testJavaPublication.artifact(testJarTask)
    testJavaPublication.artifact(testSourceJar).classifier = "sources"
    testJavaPublication.pom.withXml {
        def dependenciesNode = it.asNode().appendNode('dependencies')

        testDependencies.each { dep ->
            def depSplit = dep.split(":")
            assert (depSplit.length == 3)
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', depSplit[0])
            dependencyNode.appendNode('artifactId', depSplit[1])
            dependencyNode.appendNode('version', depSplit[2])
            def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
            exclusionNode.appendNode('groupId','ch.qos.logback')
            exclusionNode.appendNode('artifactId', 'logback-classic')
            
        }
    }

    def mainPublication = pub.publications.create("mavenJava", MavenPublication) as MavenPublication
    mainPublication.groupId = project.group
    mainPublication.artifactId = project.name
    mainPublication.version = project.version
    mainPublication.artifact(jar)
    mainPublication.artifact(sourceJar)
    mainPublication.pom.withXml {
        def rootNode = it.asNode()
        (rootNode.get("dependencies") as List<Node>).each {
            rootNode.remove(it)
        }

        def dependenciesNode = rootNode.appendNode('dependencies')
        configurations.compile.allDependencies.each {
            def altNotation = "${it.group}:${it.name}:${it.version}".toString()
            if (!testDependencies.contains(altNotation)) {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', it.group)
                dependencyNode.appendNode('artifactId', it.name)
                dependencyNode.appendNode('version', it.version)
            }
        }
    }

    def username = System.getenv("ESCIENCE_MVN_USER") ?: eScienceCloudUser
    def password = System.getenv("ESCIENCE_MVN_PASSWORD") ?: eScienceCloudPassword

    repositories {
        maven {
            def resolvedUrl = "https://dev.cloud.sdu.dk/archiva/repository/"
            if (project.version.endsWith("-SNAPSHOT")) resolvedUrl += "snapshots"
            else resolvedUrl += "internal"
            url(resolvedUrl)

            credentials {
                it.username(username)
                it.password(password)
            }
        }
    }
}


task allDeps << {
    println "All Dependencies:"
    allprojects.each { p ->
        println()
        println " $p.name ".center( 60, '*' )
        println()
        p.configurations.all.findAll { !it.allDependencies.empty }.each { c ->
            println " ${c.name} ".center( 60, '-' )
            c.allDependencies.each { dep ->
                println "$dep.group:$dep.name:$dep.version"
            }
            println "-" * 60
        }
    }
}
